default_platform(:android)

platform :android do
  desc "Android deploy"

  desc "Android Build"
  private_lane :build do |options|
    versions = google_play_track_version_codes(
      track: options[:track],
      json_key_data: ENV["PLAYSTORE_CREDENTIALS"]
    )
    current_version_code = versions[0].to_i
    new_version_code = current_version_code + 1
    new_version_name = "#{options[:build_name]}-#{new_version_code}"
    properties = {
      "versionCode" => new_version_code,
      "versionName" => new_version_name,
    }

    gradle(
      task: "clean bundle",
      build_type: "Release",
      project_dir: './android',
      properties: properties,
      flags: "--no-daemon --max-workers 2"
    )

    new_version_code
  end

  desc "Deploy to Google Play"
  private_lane :deploy do |options|
    version = build(build_name: options[:build_name], track: options[:track])

    upload_to_play_store(
      track: options[:track],
      json_key_data: ENV["PLAYSTORE_CREDENTIALS"],
      release_status: 'draft',
      skip_upload_apk: true,
    )

    slack(message: "New #{options[:build_name]} build(#{version}) available on google play")
  end

  desc "Deploy a new Alpha build to Google Play Store"
  lane :beta_deploy do |options|
    deploy(build_name: "Yoma Alpha", track: "internal")
  end

  desc "Deploy a new Production build to Google Play Store"
  lane :production_deploy do
    deploy(build_name: "Yoma", track: "production")
  end

  error do |lane, exception|
    slack(
      message: "An error has occurred",
      success: false,
      attachment_properties: {
        fields: [{
                   title: "Details",
                   value: exception.to_s,
                 }]
      },
      payload: { "Output" => exception.error_info.to_s }
    )
  end
end

import { prop } from 'ramda'

import * as SUT from './ramda.utils'

describe('src/utils/ramda.utils', () => {
  describe('safeWhen', () => {
    it('should return false if condition fails', () => {
      const condition = jest.fn(_x => false)
      const callback = jest.fn(_x => 'trueValue')
      const data = 'DATA'
      const result = SUT.safeWhen(condition, callback)(data)
      expect(result).toBe(false)
    })
    it('should return the callback value if condition succeeds', () => {
      const condition = jest.fn(_x => true)
      const callback = jest.fn(_x => 'trueValue')
      const data = 'DATA'
      const result = SUT.safeWhen(condition, callback)(data)
      expect(result).toBe('trueValue')
    })
  })
  describe('objFromListWith', () => {
    it('should return an object from a given list with the keys generated by the given function', () => {
      // given ...

      // when ...
      const result = SUT.objFromListWith(prop('id'), [
        {
          id: 'id1',
          other: 'OTHER DATA',
        },
        {
          id: 'id2',
          other: 'OTHER OTHER DATA',
        },
      ])

      // then ...
      expect(result).toEqual({
        id1: {
          id: 'id1',
          other: 'OTHER DATA',
        },
        id2: {
          id: 'id2',
          other: 'OTHER OTHER DATA',
        },
      })
    })
  })
})
